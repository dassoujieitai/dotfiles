第1章 Emacsの世界へようこそ

1.1 多くの人に愛される歴史あるエディタ
1.1.1 ユーザが自由に機能を変更・追加できる
1.1.2 使いこなせば強力な味方になる
1.1.3 本当は難しくないEmacs
1.2 本当のエディタにできること
1.2.1 エディタが本来持つべき機能
1.3 EmacsがEmacsであるための特徴
1.3.1 優れた操作性
1.3.2 設定の柔軟性
1.3.3 本体の拡張性

第2章 インストール、設定ファイルと画面の攻勢

2.1 インストール
2.1.1 Macへのインストール
2.1.1.1 Emacs.appを入手する
2.1.1.2 Emacs.appを自分でビルドする
2.1.2 Windowsへのインストール
2.1.2.1 オフィシャルビルドを利用する
2.1.2.2 NTEmacs，gnupackを利用する
2.1.3 Linuxへのインストール
2.1.4 ターミナル環境へのインストール
2.2 ディレクトリと設定ファイルの構成
2.2.1 各ディレクトリの役割
2.2.1.1 etcディレクトリ
2.2.1.2 leimディレクトリ
2.2.1.3 lispディレクトリ
2.2.1.4 site-lispディレクトリ
2.2.1.5 binディレクトリ
2.2.1.6 ホームディレクトリに作成される.emacs.dディレクトリ
2.2.2 Windowsのホームディレクトリ設定
2.2.3 設定ファイルの構成
2.3 画面の構成
2.3.1 フレーム
2.3.2 ウィンドウ
2.3.3 フリンジ
2.3.4 バッファ
2.3.4.1 [Column] Emacsは終了しない？
2.3.5 モードライン
2.3.6 ミニバッファ(エコーエリア)
2.4 モード
2.4.1 メジャーモード

    メジャーモード
        - メジャーモードとは、バッファに対して「必ず1つ」適用されるモー
          ド。
        - 現在のメジャーモードはモードラインに表示される。
        - *scratch*バッファはlisp-interaction-modeというLispシステムの
          実行環境用のモードが適用される。
        - .rbファイルを開くと、プログラミング言語Rubyを編集するための
          ruby-modeが適用される。

2.4.1.1 メジャーモードを選択するしくみ

    メジャーモードを選択するしくみ
        - Emacsはメジャーモードを自動的に選択する。
        - メジャーモードは、下記の2つを見て選択される。
            - ファイル名(主に拡張子)
            - ファイルのシバン(shebang。スクリプト言語の1行目「#!」か
              ら始まる行を指す)

        - 変数auto-mode-alistに、ファイル名にマッチさせるための正規表
          現と、マッチしたときに選択されるモードのリストが記述されてい
          る。
        - 変数auto-mode-alistのリストの先頭から順番にチェックし、マッ
          チした瞬間にそのモードを選択してファイルを開く。

        - 変数interpreter-mode-alistにも、auto-mode-alistと同じように
          マッチしたときに選択されるモードのリストが格納されている。
        - ファイルにシバンがある場合は、そのスクリプトファイルの中に書
          かれているインタプリタ名をチェックし、マッチするインタプリタ
          があれば、モードを変更する。

        - 優先度は interpreter-mode-alis > auto-mode-alist

        - 何もマッチしなければ、デフォルトでtext-modeというテキストファ
          イルを編集するためのメジャーモードを利用する。

2.4.1.2 メジャーモードが提供する機能

    メジャーモードが提供する主な機能
        - メジャーモード専用コマンド。例えば、lisp-interaction-modeで
          式を評価して戻り値を出力するeval-print-last-sexpなど。
        - 特別なキーバインド(キーマップ)
        - シンタックスハイライト(色分け表示)
        - フック

2.4.2 マイナーモード

    マイナーモード
        - マイナーモードは、1つのバッファに複数個、適用することができ
          る。
        - マイナーモードは、使いたいときに有効化し、必要が無くなれば無
          効化できる。
        - 現在のマイナーモードは、モードラインに表示される。

2.4.2.1 マイナーモードが提供する機能

    マイナーモードが提供する機能の例
        - マイナーモード専用コマンド。例えばauto-complete-modeで自動補
          完を行うauto-completeなど。
        - 特別なキーバインド(キーマップ)。
        - フック(フックが定義されていれば)。

2.4.2.2 [Column] アラインメント機能を使ってきれいなコードを書く

    M-x align
        - リージョン選択範囲のカラム位置を整える。
        - 変数align-rules-listに設定されたルールに従って自動的にカラム
          位置を整える。

    M-x align-regexp
        - リージョン選択範囲のカラム位置を整える。
        - 実行するとミニバッファで「Align regexp:」と聞かれる。そこで、
          そろえたい文字を入力する。正規表現で指定しても良い。

第3章 基本的な操作

3.1 コマンド
3.1.1 入力して実行する

    コマンドを実行する方法は2種類ある。
        (1) コマンド名を入力して実行する方法。
        (2) キーバインドから実行する方法。

    「(1) コマンド名を入力して実行する方法」
        - Emacs上で[Alt]+[x]([Alt]キーを押しながら[x]キーを押す)を押す
          と、ミニバッファにフォーカスが移動し、コマンド入力待ちの状態
          になる。
        - [Tab]キーはコマンド名の補完に使える。
        - コマンドabout-emacsは、Emacsのバージョン情報を表示する。
        - コマンドhelp-with-tutorial-spec-languageは、Emacsチュートリ
          アルを表示する。

3.1.2 キーバインドから実行する

    「(2) キーバインドから実行する方法」
        - キーバインドは一般的にはキーボードショートカットと呼ばれる。
        - キーバインドは、修飾キーと文字キーの組み合わせによる操作とな
          る。
        - キーバインド[Ctrl]+[a]は、コマンドbeginning-of-lineが割り当
          てられている。
        - キーバインド[Ctrl]+[e]は、コマンドmove-end-of-lineが割り当て
          られている。
        - Emacsのコマンドはプログラムの関数となっている。それがキーに
          割り当てられている。
        - キーバインドは自分で好きなコマンドを割り当てることができる。
        - すべてのコマンドはキーバインドから実行することができる。

3.1.2.1 コマンドの表記方法

    M-x コマンド名
        - 「M-x」は、[Alt]+[x]と同じ意味である。
        - 「M-x」は「メタエックス」、または「エムエックス」と読む。

    M-x コマンド名 RET 追加入力 RET
        - コマンド名に続けてさらにミニバッファで入力を求められる場合の
          表記方法。
        - 「RET」は[Enter]または[Ctrl]+[m]を押下する。
        - コマンドhelp-with-tutorial-spec-languageは、下記のように表記
          する。

            M-x help-with-tutorial-spec-language RET Japanese RET

3.1.2.2 キーバインドの表記方法

    - [Meta]はWindowsでは[Alt]に相当する。Macでは[Option]に相当する。
    - [Super]はWindowsでは該当するキーは無い。Macでは[Command]に相当す
      る。

        <表 3.1 キーバインド早わかり表>

          キーの種類 | 名前              | 表記
        ============+===================+===================
          修飾キー   | Control           | C-
                    | Meta              | M-
                    | Shift             | S-
                    | Super             | s-
        ------------+-------------------+-------------------
         文字・記号 | a、1、?、-、+、… | a、1、?、-、+、…
        ------------+-------------------+-------------------
         特殊キー   | Tab               | TAB
                    | Space             | SPC
                    | Escape            | ESC
                    | Return            | RET
                    | ↑                | <up>
                    | ↓                | <down>
                    | ←                | <left>
                    | →                | <right>
                    | PageUp            | <prior>
                    | PageDown          | <next>
                    | Home              | <home>
                    | End               | <end>
                    | Backspace         | <backspace>
                    | Delete            | <del>
                    | Shift + TAB       | <backtab>
                    | F1、F2、…        | <f1>、<f2>、…
        ------------+-------------------+-------------------

    - キーバインドの設定を行うとき、上記の表記を参考にして
      「(kbd "C-c l")」や「(kbd "<f4>")」と記述する。これにより、任意
      のキーバンドにコマンドを割り当てられるようになる。

3.1.2.3 キーバインドの表記サンプル

        <表 3.2 キーバインドの表記>

         キー     | 説明
        ==========+===================================================
         C-n      | [Ctrl]を押しながら[n]を押す。
                  |
         M-f      | [Meta]を押しながら[f]を押す。
                  |
         C-RET    | [Ctrl]を押しながら[Enter]を押す。
                  |
         C-x k    | [Ctrl]を押しながら[x]を押し、[Ctrl]を離してから、
                  | [k]を押す。
                  |
         C-x C-c  | [Ctrl]を押しながら[x]を押し、そのまま[c]を押す。
                  |
         C-M-S-v  | [Ctrl]と[Meta]と[Shift]を押しながら[v]を押す。
                  |
         C-/、C-_ | [Ctrl]を押しながら[/]、もしくは[Ctrl]を押しながら
                  | [_]を押す(日本語キーボードの場合は[Ctrl]と[Shift]
                  | を押しながら[￥]を押す。
        ----------+---------------------------------------------------

    - キーバインドの後にコマンド名を表記する場合がある。

        C-x C-f (find-file)

    - C-x C-fを入力する他に、M-x find-file RETとしても利用できることを
      意味する。

3.1.2.4 プレフィックスキー(起点キー)

    プレフィックスキー
        - Emacsでは、C-x C-fのC-xのように、単体ではコマンドが実行され
          ず、その後にキー入力を必要とするキーバインドを、プレフィック
          スキーと呼ぶ。
        - プレフィックスキーは、それぞれキーバインド設計のための指針が
          ある。下記にその指針を示す。

        <表3.3 プレフィックスキーの指針>

         キー | 説明
        ======+=======================================================
         C-x  | システムコマンドが利用する。
              |
         C-c  | ユーザがキーバインドを定義するためのプレフィックス
              | キー。拡張機能を作る場合、C-cで始まるキーバインドはあ
              | まり定義しないようにする。
              |
         M-g  | 行移動に関するキーバインドが定義されている。
        ------+-------------------------------------------------------

3.2 起動と終了
3.2.1 起動する

    $ emacs
        - Emacsを通常起動する。

    $ emacs -nw もしくは -no-window-system
        - Emacsをターミナル内で起動する。

    $ emacs --help
        - ヘルプメッセージを表示する。

3.2.1.1 Emacsデーモンで起動を高速化する

    $ emacs --daemon
        - Emacsをデーモンとして起動する。
        - WindowsプラットフォームではEmacsのデーモン機動はサポートされ
          ていない。

    $ emacsclient -c または --create-frame
        - デーモンとして機動したEmacsを利用する。
        - X-windowシステム上でEmacsを利用する場合に使用するコマンド。

    $ emacsclient -t または -nw
        - デーモンとして機動したEmacsを利用する。
        - ターミナル上でEmacsを利用する場合に使用するコマンド。

    $ emacsclient -e '(kill-emacs)'
        - Emacsデーモンを終了する。
        - コマンドラインからEmacsを終了する場合に使用するコマンド。

    M-x kill-emacs
        - Emacsデーモンを終了する。
        - Emacs上からEmacsデーモンとEmacsを終了させるために使用するコ
          マンド。

    alias start-emacs-daemon="emacs --daemon"
    alias start-emacs-client="emacsclient --create-frame"
    alias start-emacs-client-nw="emacsclient -nw"
    alias start-emacs-client-terminal="emacsclient -nw"
    alias kill-emacs-daemon="emacsclient -e '(kill-emacs)'"

3.2.2 [Column] 困ったときはC-gでキャンセル

    C-g (keyboard-quit)
        - その時点での操作をキャンセルさせる。

3.2.2.1 デバッグモードでの起動

    $ emacs --debug-init
        - Emacs起動時のエラーの、完全なバックトレースを表示させる。

3.2.3 終了する

    C-x C-c
        - Emacsを終了させる。
        - まだ保存していないファイルがある場合、ミニバッファに質問が表
          示される。

        Save file /Users/ユーザー名/abc.txt? (y, n, !, ., q, C-r, d or C-h)

         キー | 説明
        ======+============================================================
         y    | このファイルを保存する。
         n    | このファイルを保存しない。
         !    | (未保存のファイルが複数ある場合)全てを保存する。
         .    | このファイルを保存してEmacsを終了する。
         q    | すべてのファイルの保存を行わない。
         C-r  | ファイルをすべて表示する(フレーム上に表示されていない場合)
         d    | 保存されているファイルと編集中のバッファの差分を表示する。
         C-h  | 選択肢のヘルプを表示する。
         C-g  | 操作をキャンセルする(何もしない)。

3.3 ファイル(バッファ)を開く，保存する
3.3.1 ファイル(バッファ)を開く--C-x C-f

    C-x C-f (find-file)
        - ファイルを開くためのコマンド。
        - カレントバッファのディレクトリ位置を起点として、ミニバッファ
          でファイル名の入力を受け付ける。
        - ミニバッファではTABによる補完が使える。
        - 存在しないファイル名を入力するとバッファが作成され、保存時に
          ディスクにファイル名として書き込まれる。

3.3.2 ファイル(バッファ)を保存する--C-x C-s

    C-x C-s (save-buffer)
        - バッファを保存する。
        - 標準の設定では、一番初めにファイルを保存する際、ファイルを開
          いたときの状態をバックアップファイルとして保存する。このバッ
          クアップファイルを利用することで、何度保存しても最初に開いた
          ときの状態に復元できる。

3.3.3 すべてのファイル(バッファ)を保存する--C-x s

    C-x s (save-some-buffers)
        - Emacs上で開いている全てのファイルを保存する。
        - 各ファイルにに対して保存するかそれぞれ確認を求められる。

3.3.4 バックアップファイル

    Emacsが作成するバックアップファイル
        - Emacsが作成するバックアップファイルは、ファイル名の末尾に「~」
          を付けた名前となっている。

            init.el~

        - バックアップファイルは、Emacsを終了しても残り続ける。

3.3.4.1 オートセーブファイル

    オートセーブファイル
        - Emacsが編集中のファイルのバックアップを随時作成する仕組み。
        - アイドルタイム(Emacsで操作していない時間)を利用して、オート
          セーブファイルを自動的に作成する仕組み。
        - オートセーブファイル名は、ファイル名の前後に「#」が付いた名
          前となる。

            #init.el#

        - オートセーブファイルは、バッファをファイルに保存すると削除さ
          れる。

3.3.5 別名で保存する--C-x C-w

    C-x C-w (write-file)
        - ファイルを別名で保存する。
        - コマンドを入力すると、ファイル名をパスも含めて聞かれる。ファ
          イル名を入力してRETすると別名で保存される。

3.3.6 バッファに別ファイルを挿入する--C-x i

    C-x i (insert-file)
        - 現在開いているバッファに別のファイルを挿入する。

    M-x insert-buffer
        - 現在開いているバッファに別のバッファを挿入する。

3.3.7 文字コード・改行コードを変換する--C-x RET f

    - Emacsはファイルを開くときに、自動判別して適切な文字コードでファ
      イルを開く。
    - Emacsでファイルを作成したときの標準文字コードはUnicode(UTF-8)、
      改行コードはUNIX(LF)である。

    C-x RET f (set-buffer-file-coding-system)
        - 現在開いているバッファの文字コードを変更する。
        - C-x RET fと入力すると、「Coding system for saving file
          (default nil):」と表示される。
        - 変更する文字コードの名前を入力する。
        - 「sjis-dos」と入力すると、シフトJISでCR+LFになる。
        - 「sjis」と入力するとシフトJISになり、改行コードは変更しない。
        - 指定できる文字コードと改行コードを以下に示す。
        - 文字コードと改行コードはTABによる補完と候補一覧表示が利用で
          きる。

    <表3.5 文字コード>

    ------------------+-------------------+-------------------------
     モードライン表記 | 文字コード名      | Emacs上での呼称
    ==================+===================+=========================
            U         | Unicode           | utf-8、utf-16、utf-7
            S         | シフトJIS         | sjis(shift_jis)
            J         | JISコード         | iso-2022-jp
            E         | 日本語EUC         | euc-jp、euc-jp-2004など
            1         | Latin-1           | latin-1(iso-8859-1)
            M         | emacs-mule (※)    | emacs-mule
    ------------------+-------------------+-------------------------
    (※) モードライン表記は、環境によってはunixは(Unix)、dosは¥と表示
         される場合あり。

    <表3.6 改行コード>

    ------------------+--------------+---------------+--------------------
     モードライン表記 | 改行コード表 | Emacs上の呼称 |        説明
    ==================+==============+===============+====================
            :         | LF           | unix          | UNIX系OSで主に利用さ
                      |              |               | れる
          (DOS)       | CR+LF        | dos           | Windowsで主に利用さ
                      |              |               | れる
          (Mac)       | CR           | mac           | Mac OS 9まで利用され
                      |              |               | ていた
    ------------------+--------------+---------------+--------------------

3.3.8 文字コード・改行コードを変換して開き直す--C-x RET r

    C-x RET r (revert-buffer-with-coding-system)
        - 文字コードを指定して開き直す。
        - C-x RET rを押すと文字コードを入力し、ファイルを指定して文字
          コードを開き直す。

3.3.9 バッファを切り替える--C-x b

    C-x b (switch-to-buffer)
        - 指定したバッファを表示する。
        - TABによる補完も利用できる。

    C-x <right> (next buffer)
        - Emacsの中で管理しているバッファのリストに従って、バッファを
          切り替える。

    C-x <left> (previous buffer)
        - Emacsの中で管理しているバッファのリストに従って、バッファを
          切り替える。

    C-x C-b (list-buffers)
        - Emacsが管理しているバッファの一覧を表示する。
	- *Buffer List*という特殊なバッファで表示する。

3.3.10 バッファを消去する--C-x k

    C-x k (kill-buffer)
        - バッファを消去する。
	- C-x kとタイプすると、消去するバッファを削除する。
	- まだバッファが保存されていない場合は、「Buffer バッファ名
          modified; kill anyway? (yes or no)」という質問が表示される。
          yesと入力すると、バッファを保存せず消去、すなわち編集を破棄
          する。noまたはC-gでバッファの消去をキャンセルする。

3.4 カーソル移動
3.4.1 キーバインド一覧

    -----
    キー | コマンド名 | 説明

    C-l  | recenter-top-button | カーソル位置を起点にウィンドウ表示を
         |                     | リフレッシュする。
    C-n  | next-line           | 1つ下の行へ移動する。
    C-f  | forward-char        | 1文字後ろに移動する。

3.4.2 Emacsのホームポジション
3.5 文字の入力や文字列の操作
3.5.1 マークとリージョン--C-SPC
3.5.2 コピーとカット--M-w，C-w
3.5.3 行を消去する--C-k
3.5.4 ペーストする--C-y，C-y M-y……
3.5.5 コメントする，コメントを解除する--M-;
3.5.6 [Column] ちょっと便利なリージョン選択方法
3.5.7 特殊文字を入力する--C-q
3.5.8 アンドゥ--C-/，C-_，C-x u
3.6 Emacsの正規表現
3.6.1 特別な文字
3.7 検索と置換
3.7.1 grepによる検索
3.7.2 インクリメンタル検索--C-s，C-r，C-M-s，C-M-r
3.7.3 対話置換，一括置換--M-%，C-M-%
3.7.3.1 ナローイングでバッファの一部のみを編集する
3.8 ウィンドウ操作
3.8.1 ウィンドウを分割する--C-x 2，C-x 3
3.8.2 ウィンドウを移動する--C-x o
3.8.3 分割したウィンドウを閉じる--C-x 1，C-x 0
3.9 ディレクトリ操作(Dired)
3.10 キーボードマクロによる繰り返し操作
3.10.1 基本的な使い方
3.10.2 名前を付ける
3.10.3 再利用するために保存する
3.11 表示の変更
3.11.1 文字サイズをすぐに変更する--C-x C-+，C-x C-=，C-x C--，C-x C-0
3.11.2 行の折り返し表示を変更する--M-x toggle-truncate-lines
3.12 ヘルプの利用
3.12.1 info--M-x info
3.12.2 ヘルプコマンド--C-h，<f1>
3.12.3 よく利用するヘルプコマンド
3.12.3.1 C-h a 文字列 RET
3.12.3.2 C-h b
3.12.3.3 C-h k キーバインド
3.12.3.4 C-h w コマンド名 RET
3.12.3.5 C-h f 関数名 RET
3.12.3.6 C-h v 変数名 RET
3.12.4 日本語ドキュメント

4章 設定ファイルの管理方法

4.1 効率的な設定ファイルの作り方と管理方法
4.1.1 ~/.emacs.dディレクトリに設定をまとめて管理
4.1.1.1 サブディレクトリの構成
4.1.1.2 Elispをどのように配置すべきか
4.1.1.3 Elisp配置用のディレクトリを作成する
4.1.1.4 ロードパスを追加する
4.1.1.5 設定を反映するには
4.1.2 設定を分割して管理
4.1.2.1 ファイルを分ける
4.1.2.2 init-loader.elを利用する
4.2 環境に応じた設定の分岐
4.2.1 OSの違いによる分岐
4.2.2 CUIとGUIによる分岐
4.2.3 Emacsのバージョンによる分岐
4.3 拡張機能の読み込み方
4.3.1 requireとautoloadの違い
4.3.1.1 require
4.3.1.2 autoload
4.3.2 コマンドがある場合のみ読み込む
4.4 Webサービスを用いたバックアップ
4.4.1 GitHub
4.4.1.1 ~/projects/dotfilesディレクトリに設定ファイルを移動する
4.4.1.2 シンボリックリンクを利用する
4.4.1.3 Gitにコミットする
4.4.1.4 GitHubへプッシュする
4.4.2 Dropbox
4.4.3 [Column] エディタ採用

5章 本体の設定

5.1 設定を反映する方法
5.1.1 C-x C-eとC-jによる評価
5.1.2 その他の評価
5.2 キーバインドの設定
5.2.1 キーマップ
5.2.1.1 キーバインドの優先順位
5.2.2 キーバインドの割り当て
5.2.3 お勧めのキー操作
5.2.3.1 改行と同時にインデントする
5.2.4 [Column] C-hをバックスペースにする
5.2.4.1 行の折り返し表示を切り替える
5.2.4.2 簡単にウィンドウを切り替える
5.3 環境変数の設定
5.3.1 パスの設定
5.3.2 文字コードの設定
5.3.2.1 現在の文字コード設定を調べる
5.3.2.2 文字コードを指定する
5.3.2.3 ファイル名の扱い
5.4 フレームに関する設定
5.4.1 モードラインに関する設定
5.4.1.1 行番号／カラム番号を表示する
5.4.1.2 ファイルサイズ，時計，バッテリー残量を表示する
5.4.2 タイトルバーにファイルのフルパスを表示
5.4.3 ウィンドウ左に行番号を表示
5.5 インデントの設定
5.5.1 タブ文字の表示幅
5.5.2 タブ文字の利用
5.5.3 C，C++，JAVA，PHPなどのインデント
5.6 表示・装飾に関する設定
5.6.1 フェイス
5.6.2 表示テーマの設定
5.6.3 フォントの設定
5.6.3.1 英語フォントを指定する
5.6.3.2 日本語フォントを指定する
5.6.3.3 フォントの横幅を調節する
5.7 ハイライトの設定
5.7.1 現在行のハイライト
5.7.2 対応する括弧のハイライト
5.8 バックアップとオートセーブ
5.8.1 オートセーブファイルからの復元
5.8.2 バックアップとオートセーブの設定
5.8.2.1 バックアップとオートセーブファイルの作成先を変更する
5.8.2.2 オートセーブの間隔を変更する
5.9 フック
5.9.1 自動化のしくみ
5.9.2 利用方法
5.9.2.1 無名関数lambdaを使う場合
5.9.2.2 関数を定義する場合
5.9.3 代表的なフック一覧
5.9.4 [Column] 簡単な計算は*scratch*バッファで

6章 テキスト編集をさらに効率化する拡張機能

6.1 Elispをインストールしよう
6.1.1 標準的なインストール方法
6.1.1.1 auto-installを導入する
6.1.2 バイトコンパイル
6.1.2.1 byte-compile-fileコマンド
6.1.2.2 シェルからバイトコンパイルする
6.1.3 拡張機能の自動インストール--auto-install
6.1.3.1 利用可能にする
6.1.3.2 利用する
6.1.4 [Column] 拡張機能の設定方法を調べるには
6.1.5 Emacs Lisp Package Archive(ELPA)--Emacs Lispパッケージマネージャ
6.1.5.1 Emacs 23へpackage.elをインストールする
6.1.5.2 ELPAのパッケージ一覧を取得する
6.1.5.3 パッケージ一覧から選択してインストールする
6.1.5.4 コマンドから直接インストールする
6.1.5.5 インストール先のディレクトリ構成と設定のしくみ
6.2 統一したインタフェースでの操作
6.2.1 候補選択型インタフェース--Anything
6.2.1.1 インストールする
6.2.1.2 利用可能にする
6.2.1.3 ファイルを開く・バッファを切り替える
6.2.1.4 キーバインドを一覧表示する--describe-bindings
6.2.1.5 過去の履歴からペーストする--anything-show-kill-ring
6.2.1.6 moccurを利用する--anything-c-moccur
6.3 入力の効率化
6.3.1 補完入力の強化--Auto Complete Mode
6.3.1.1 インストールする
6.3.1.2 利用可能にする
6.3.1.3 補完候補をポップアップ＆絞り込む
6.4 検索と置換の拡張
6.4.1 検索結果のリストアップ--color-moccur
6.4.1.1 インストールする
6.4.1.2 利用可能にする
6.4.1.3 代表的なコマンド
6.4.1.4 マルチバッファを検索し結果をリストアップする
6.4.1.5 カレントバッファを検索し結果をリストアップする
6.4.2 moccurの結果を直接編集--moccur-edit
6.4.2.1 インストールする
6.4.2.2 利用可能にする
6.4.2.3 mocccurの結果を編集する
6.4.2.4 編集を終了したときにファイルを自動保存する
6.4.3 grepの結果を直接編集--wgrep
6.4.3.1 インストールする
6.4.3.2 利用可能にする
6.4.3.3 grepの結果を編集する
6.5 さまざまな履歴管理
6.5.1 編集履歴の記憶--undohist
6.5.1.1 インストールする
6.5.1.2 利用可能にする
6.5.1.3 ファイルを閉じたあとにアンドゥする
6.5.2 アンドゥの分岐履歴--undo-tree
6.5.2.1 インストールする
6.5.2.2 利用可能にする
6.5.2.3 樹形図を見ながらアンドゥする
6.5.3 カーソルの移動履歴--point-undo
6.5.3.1 インストールする
6.5.3.2 利用可能にする
6.5.3.3 カーソル位置を戻す／やりなおす
6.6 ウィンドウ管理
6.6.1 分割状態を管理--ElScreen
6.6.1.1 インストールする
6.6.1.2 利用可能にする
6.6.1.3 スクリーンを作成する
6.6.1.4 スクリーンを移動する
6.6.1.5 代表的なキーバインド
6.7 メモ・情報整理
6.7.1 メモ書き・ToDo管理--howm
6.7.1.1 インストールする
6.7.1.2 利用可能にする
6.7.1.3 howm-menuを起動する
6.7.1.4 メモを書く
6.7.1.5 保存と同時に閉じる
6.7.2 アウトラインエディタ--org-mode
6.7.2.1 アウトライン編集機能
6.7.2.2 箇条書きなどを入力する
6.7.2.3 表を入力する
6.8 特殊な範囲の編集
6.8.1 矩形編集--cua-mode
6.8.1.1 利用可能にする
6.8.1.2 各行頭に文字を追加する
6.8.1.3 各行頭の文字を削除する
6.8.1.4 連番を入力する

7章 開発をさらに効率化する拡張機能

7.1 各種言語の開発環境
7.1.1 HTML
7.1.1.1 html-mode
7.1.1.2 html-modeを利用してタグを入力する
7.1.1.3 html-modeが自動選択されるしくみ
7.1.1.4 nxml-mode
7.1.1.5 nxml-modeをHTML編集のデフォルトモードに
7.1.1.6 nxml-modeで構文チェックする
7.1.1.7 HTML5をnxml-modeで編集する
7.1.1.8 nxml-modeの基本設定
7.1.2 CSS
7.1.2.1 cssm-mode
7.1.2.2 cssm-modeの基本設定
7.1.2.3 auto-completeによる補完を利用する
7.1.3 JavaScript
7.1.3.1 標準のjs-mode
7.1.3.2 構文チェック機能を備えたjs2-mode
7.1.3.3 js2-modeをインストールする
7.1.3.4 js2-modeが持つインデントの不具合を解決する
7.1.4 PHP
7.1.4.1 php-mode
7.1.4.2 オンラインドキュメントを利用する
7.1.4.3 php-modeのインデントを調整する
7.1.4.4 PHP補完入力--php-completion
7.1.5 Perl
7.1.5.1 cperl-mode
7.1.6 [Column] 便利なエイリアス
7.1.6.1 cperl-modeのインデントを調整する
7.1.6.2 yaml-mode
7.1.6.3 Perl補完入力--perl-completion
7.1.7 Ruby
7.1.7.1 ruby-modeのインデントを調整する
7.1.7.2 Ruby編集用の便利なマイナーモードを利用する
7.1.7.3 Emacsからirbを利用する--inf-ruby
7.1.8 Python
7.1.8.1 python-mode.el
7.1.8.2 PyChekerで構文をチェックする
7.1.8.3 そのほかの構文チェックツール--pep8，pyflakes，flake8，pylint
7.1.8 C/C++
7.1.8.1 cc-mode
7.1.8.2 cc-mode付属のマイナーモード
7.1.8.3 c-mode-common-hookとそれぞれのフック
7.2 Flymakeによる文法チェック
7.2.1 Flymakeを利用できる言語
7.2.2 PerlのFlymake設定から学ぶ
7.2.3 C言語系
7.2.3.1 Makefileがあれば利用し，なければ直接コマンドを実行する
7.2.4 XMLとHTML
7.2.5 JavaScript
7.2.5.1 jslをインストールする
7.2.5.2 jslを利用可能にする
7.2.6 Ruby
7.2.7 Python
7.3 タグによるコードリーディング
7.3.1 Etags以外のタグ作成プログラム
7.3.2 gtagsとEmacsの連携
7.3.2.1 gtags.elをインストールする
7.3.2.2 gtags-modeの使い方
7.3.3 ctagsとEmacsの連携
7.3.3.1 ctags.elをインストールする
7.3.4 Anythingとタグの連携
7.3.4.1 anything-for-tagsコマンドを作成する
7.4 フレームワーク専用拡張機能
7.4.1 Rinari--Ruby on Rails Minor Mode for Emacs
7.4.1.1 インストールする
7.4.1.2 ナビゲーション機能でファイルを移動する
7.4.1.3 よく利用するRinariコマンド
7.4.2 CakePHP Minor Mode--emacs-cake
7.4.2.1 インストールする
7.4.2.2 ナビゲーション機能でファイルを移動する
7.4.2.3 auto-completeと連携する
7.5 特殊な文字の入力補助
7.5.1 絵文字の入力補助--emoji.el
7.5.2 インストールする
7.5.3 利用する
7.6 差分とマージ
7.6.1 diffによる差分表示--M-x diff
7.6.2 Ediffによる差分表示--M-x ediff
7.6.2.1 利用する
7.6.2.2 同一フレーム内にコントロールパネルを表示する
7.6.2.3 キーバインド一覧
7.6.3 Ediffによるパッチの適用--M-x epatch
7.6.4 Ediffによるマージ--M-x ediff-merge
7.7 Emacsからデータベースを操作
7.7.1 データベースへの接続
7.7.1.1 MySQLへ接続する--sql-interactive-mode
7.7.2 sql-modeとの連携
7.8 バージョン管理
7.8.1 Emacs標準のバージョン管理機能
7.8.2 Subversionフロントエンド--psvn
7.8.2.1 インストールする
7.8.2.2 利用する
7.8.3 Gitフロントエンド--Egg
7.8.3.1 インストールする
7.8.3.2 利用する
7.9 シェルの利用
7.9.1 シェルコマンドの実行--M-!
7.9.1.1 カレントファイルへ結果を出力する--C-u M-!
7.9.1.2 バッファの内容を標準入力として利用する--M-|
7.9.2 ターミナルの利用--multi-term
7.9.2.1 インストールする
7.9.2.2 利用する
7.10 TRAMPによるサーバ接続
7.10.1 sudo，suによる編集
7.10.2 バックアップファイルを作成しない
7.11 ドキュメント閲覧・検索
7.11.1 Emacs版manビューア（WoMan）の利用
7.11.1.1 利用可能にする
7.11.2 Anythingによるman検索
======================================================================
